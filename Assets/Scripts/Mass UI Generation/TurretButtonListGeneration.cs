using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.ResourceManagement.AsyncOperations;

public class TurretButtonListGeneration : MonoBehaviour
{
    //Variables section
    [SerializeField] private GameObject turretButtons;
    [SerializeField] private GameObject turretTabs;
    [SerializeField] private List<string> tabs = new List<string>();
    [SerializeField] private GameObject tabHolder;
    [SerializeField] private GameObject buttonHolder;
    [SerializeField] private List<GameObject> generatedButtons = new List<GameObject>();
    [SerializeField] private GameObject allTab;
    [SerializeField] private BuyTurretScript buyTurretScript;

    [EditorButton(nameof(GenerateButtons))] public bool test; //TEMPORARY
    //Functions section

    private void Start()
    {
        if (AddressablesHolder.trackLoadedObjects.IsDone)
        {
            OnAssetLoad();
        }
        else
        {
            AddressablesHolder.trackLoadedObjects.Completed += OnAssetLoad;
        }
    }

    void OnAssetLoad(AsyncOperationHandle<IList<ScriptableObject>> _) => OnAssetLoad(); //Throw away value from async operation

    private void OnAssetLoad()
    {
        GenerateButtons(buttonHolder);
        PlaceButtonsInAllTab();
        GenerateEachTabCategory();
    }

    private void OnDestroy()
    {
        if (AddressablesHolder.trackLoadedObjects.IsValid())
        {
            AddressablesHolder.trackLoadedObjects.Completed -= OnAssetLoad;
        }
    }


    // Below is a function which will generate the buttons based on each turret settings. Then it will assign it to each tab.
    public void GenerateButtons(GameObject parentTab)
    {
        foreach(var tab in AddressablesHolder.FilterByType(typeof(TurretSettings)))
        {
            if(tab is TurretSettings turret)
            {
                //Debug.LogWarning(turret.name);
                var newButtons = Instantiate(turretButtons);
                generatedButtons.Add(newButtons);
                //Debug.Log($"{newButtons}, {parentTab}; From TurretButtonListGeneration.cs");
                newButtons.transform.SetParent(parentTab.transform);
                newButtons.GetComponent<TurretButtonInitializing>().InitializeButton(turret);
                newButtons.GetComponent<Button>().onClick.AddListener(() => buyTurretScript.BuyTurret(turret));
            }
        }
    }
    
    public void PlaceButtonsInAllTab()
    {
        var allTab = Instantiate(turretTabs);
        allTab.transform.SetParent(tabHolder.transform);
        allTab.GetComponent<TabButton>().onTabSelect.AddListener(()=> SelectivelyToggleButtons(null));
    }
    
    
    // The function below will put all the buttons generated by GenerateButtons() into categorized tabs. The info for each button is taken from the generatedButtons list.
    // How it works (when the tab is clicked):
    // Deactivate all buttons
    // Reactivate the buttons that do belong in the tab, based on TabScriptableObject.cs
    
    
    public void GenerateEachTabCategory()
    {
        foreach (var tab in AddressablesHolder.FilterByType(typeof(TabScriptableObject)))
        {
            if(tab is TabScriptableObject)
            {
                var newTab = Instantiate(turretTabs);
                newTab.transform.SetParent(tabHolder.transform);
                newTab.GetComponent<TabInitializer>().InitializeTab(tab as TabScriptableObject);
                newTab.GetComponent<TabButton>().onTabSelect.AddListener(() => SelectivelyToggleButtons(tab as TabScriptableObject));
            }
        }
    }
    
    public void SelectivelyToggleButtons(TabScriptableObject tab)
    {
        if (tab is null) //If tab is null, it's equivalent to the "All" category.
        {
            foreach (var button in generatedButtons)
            {
                button.SetActive(true);
            }
        }
        else
        {
            foreach (var button in generatedButtons)
            {
                if (button.GetComponent<TurretButtonInitializing>().turretSettings.turretCategory == tab)
                {
                    button.SetActive(true);
                }
                else
                {
                    button.SetActive(false);
                }
            }
        }
    }

    /*
    public void GenerateTabs()
    {
        foreach (var tab in AddressablesHolder.FilterByType(typeof(TabScriptableObject)))
        {
            if (tab is TabScriptableObject tabScriptableObject)
            {
                var newTab = Instantiate(turretTabs);
                newTab.transform.SetParent(tabHolder.transform);
                newTab.GetComponent<TabInitializer>().InitializeTab(tabScriptableObject);
                GenerateButtons(newTab);
            }
        }
    }
    */
    
}
